@model WebCadastroProcessos.Models.Processo

@{
    ViewData["Title"] = "Create";
}

<style>
    body {
        background-size: cover;
        background-position: center;
        color: white; 
    }

    .form-container {
        background-color: rgba(0, 0, 0, 0.7); 
        padding: 20px;
        border-radius: 8px;
    }

    .btn-custom {
        width: 100%;
        margin-top: 10px;
    }

    .btn-custom:hover {
        background-color: #0056b3; 
    }
</style>

<h1>Create</h1>

<h4>Processo</h4>
<hr />
<div class="row">
    <div class="col-md-6 offset-md-3">
        <div class="form-container">
            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group">
                    <label asp-for="Nome" class="control-label"></label>
                    <input asp-for="Nome" class="form-control" placeholder="Digite o nome do processo" />
                    <span asp-validation-for="Nome" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label asp-for="Npu" class="control-label"></label>
                    <input asp-for="Npu" class="form-control" placeholder="Formato: 1111111-11.1111.1.11.1111" oninput="maskNpu(this)" />
                    <span asp-validation-for="Npu" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="uf">UF</label>
                    <select id="uf" name="Uf" class="form-control" onchange="fetchMunicipios()">
                        <option value="">Selecione uma UF</option>
                        @foreach (var uf in ViewBag.Uf)
                        {
                            <option value="@uf">@uf</option>
                        }
                    </select>
                    <span asp-validation-for="Uf" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <label for="municipio">Município</label>
                    <select id="municipio" name="Municipio" class="form-control">
                        <option value="">Selecione um município</option>
                    </select>
                    <span asp-validation-for="Municipio" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <input type="submit" value="Salvar" class="btn btn-primary btn-custom" />
                </div>
                <div>
                    <a asp-action="Index" class="btn btn-link btn-custom">Voltar</a>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        async function fetchMunicipios() {
            const uf = document.getElementById('uf').value;
            if (!uf) return; 

            console.log("Fetching municipios for UF:", uf); 

            try {
                const response = await fetch(`/Processo/GetMunicipios?uf=${uf}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const municipios = await response.json();
                const municipioSelect = document.getElementById('municipio');

                municipioSelect.innerHTML = '<option value="">Selecione um município</option>'; 
                municipios.forEach(municipio => {
                    const option = document.createElement('option');
                    option.value = municipio.nome; 
                    option.textContent = municipio.nome;
                    municipioSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Erro ao buscar municípios:', error);
            }
        }

        function maskNpu(input) {
            let value = input.value.replace(/\D/g, '');

            if (value.length > 7) {
                value = value.slice(0, 7) + '-' + value.slice(7);
            }
            if (value.length > 10) {
                value = value.slice(0, 10) + '.' + value.slice(10);
            }
            if (value.length > 15) {
                value = value.slice(0, 15) + '.' + value.slice(15);
            }
            if (value.length > 18) {
                value = value.slice(0, 18) + '.' + value.slice(18);
            }

            input.value = value; 

            const regex = /^\d{7}-\d{2}\.\d{4}\.\d{2}\.\d{4}$/;
            if (!regex.test(input.value) && input.value.length === 25) {
                const errorMessage = document.createElement('div');
                errorMessage.className = 'text-danger';
                errorMessage.textContent = "Formato inválido! Use o formato 1111111-11.1111.1.11.1111";
                input.parentNode.appendChild(errorMessage);
                input.value = ''; 
            }
        }
    </script>
}
